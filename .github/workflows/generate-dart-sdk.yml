name: Generate Dart SDK for joicodev/orion_gem_dart_client

on:
  push:
    branches:
      - develop # This is the trigger branch in the repo where this workflow file lives
  workflow_dispatch:

jobs:
  generate-sdk:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the target SDK repository (joicodev/orion_gem_dart_client)
      - name: ‚¨áÔ∏è Checkout Dart SDK target repo (joicodev/orion_gem_dart_client)
        uses: actions/checkout@v4
        with:
          repository: joicodev/orion_gem_dart_client
          path: sdk_target_repo # Local path where the SDK repo will be checked out
          token: ${{ secrets.SDK_REPO_PAT }} # PAT with write access to joicodev/orion_gem_dart_client
          # ref: 'main' # Or 'develop', specify the branch to checkout if not the default

      # Step 2: Checkout the NestJS API repository
      - name: ‚¨áÔ∏è Checkout NestJS API repo
        uses: actions/checkout@v4
        with:
          repository: joicodev/orion_gem_nest_api # Assuming this is the correct API repo
          path: backend # Local path for the API backend

      # Step 3: Setup Node.js for the backend
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 4: Install backend dependencies
      - name: üì¶ Install backend dependencies
        working-directory: backend
        run: npm ci

      # Step 5: Run NestJS API in background
      - name: üöÄ Run NestJS API in background
        working-directory: backend
        run: |
          npm run start:dev &
          echo "‚è≥ Waiting for API to be ready..."
          for i in {1..30}; do
            if curl -s --fail http://localhost:3000/api-json > /dev/null; then
              echo "‚úÖ API is up!"
              break
            elif [ $i -eq 30 ]; then
              echo "‚ùå API did not start in time."
              exit 1
            fi
            sleep 2
          done

      # Step 6: Extract version from the SDK target repo's pubspec.yaml or use default
      - name: üíæ Extract version from SDK target repo or default
        id: get_version
        working-directory: sdk_target_repo # Operate on the checked-out SDK target repo
        run: |
          if [ -f pubspec.yaml ]; then
            VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}' || echo "1.0.0")
          else
            VERSION="1.0.0" # Default if no pubspec.yaml (e.g., first run)
          fi
          echo "SDK current/default version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT" # This version will be used by openapi-generator

      # Step 7: Clean old SDK files in the SDK target repo
      - name: üßπ Clean old SDK files in SDK target repo
        working-directory: sdk_target_repo # Operate on the checked-out SDK target repo
        run: rm -rf lib doc test pubspec.yaml .openapi-generator .openapi-generator-ignore openapi-docs

      # Step 8: Generate Dart SDK into the SDK target repo
      - name: ‚öôÔ∏è Generate Dart SDK
        working-directory: sdk_target_repo # Operate on the checked-out SDK target repo
        run: |
          npm install -g @openapitools/openapi-generator-cli
          openapi-generator-cli generate \
            -g dart-dio \
            -i http://localhost:3000/api-json \
            -o . \
            --additional-properties=pubName=orion_gem_dart_client,pubVersion=${{ steps.get_version.outputs.version }},serializationLibrary=built_value,buildRunner=true,useEnumExtension=true

      # Step 9: Setup Flutter (for build_runner)
      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          # cache: true

      # Step 10: Run build_runner in the SDK target repo
      - name: üì¶ Generate .g.dart files in SDK target repo
        working-directory: sdk_target_repo # Operate on the checked-out SDK target repo
        run: |
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs

      # Step 11: Create SDK branch, commit, and push to joicodev/orion_gem_dart_client
      - name: üÜï Create SDK branch and commit to SDK target repo
        working-directory: sdk_target_repo # Operate on the checked-out SDK target repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          BRANCH_NAME="auto/sdk-update-v${{ steps.get_version.outputs.version }}"
          git checkout -B "$BRANCH_NAME"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit to SDK target repo."
          else
            git commit -m "feat: Auto-generate SDK v${{ steps.get_version.outputs.version }}"
            # This push goes to the 'origin' of sdk_target_repo,
            # which is joicodev/orion_gem_dart_client due to the checkout with PAT
            git push origin "$BRANCH_NAME" --force
            echo "Pushed changes to branch $BRANCH_NAME in joicodev/orion_gem_dart_client"
          fi

      # Step 12: Create Pull Request in joicodev/orion_gem_dart_client
      - name: üöÄ Create Pull Request in SDK Repo
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.SDK_REPO_PAT }} # Use the PAT with access to joicodev/orion_gem_dart_client
          repository: joicodev/orion_gem_dart_client # Explicitly target this repository for the PR
          # 'path' is not needed here as commits are already pushed to the branch in the target repo
          branch: auto/sdk-update-v${{ steps.get_version.outputs.version }} # The branch that was just pushed
          base: main # Or 'develop', the base branch in joicodev/orion_gem_dart_client
          delete-branch: true # Optional: delete the auto-generated branch after PR merge/close
          title: "ü§ñ SDK: Auto-generated update v${{ steps.get_version.outputs.version }}"
          committer: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          body: |
            This PR contains the auto-generated Dart client for Orion GEM API.

            **Version:** `${{ steps.get_version.outputs.version }}`

            <sub>Generated by GitHub Actions ü§ñ</sub>
          labels: |
            sdk
            auto-generated
            version:${{ steps.get_version.outputs.version }}
          draft: false

      # Step 13: Create and push tag to joicodev/orion_gem_dart_client
      - name: üè∑Ô∏è Create and push tag to SDK Repo
        # Decide when to run this, e.g., only on pushes to the 'develop' branch of the workflow's repo
        if: github.ref == 'refs/heads/develop' && (steps.create_pr.outputs.pull-request-operation == 'created' || steps.create_pr.outputs.pull-request-operation == 'updated')
        working-directory: sdk_target_repo # Operate on the checked-out SDK target repo
        env:
          # The PAT is already available to git commands if it was used for checkout.
          # If explicit authentication is needed for push (sometimes depends on git version/runner config):
          # GIT_USER: github-actions[bot]
          # GIT_PAT: ${{ secrets.SDK_REPO_PAT }}
          TAG_NAME: "v${{ steps.get_version.outputs.version }}"
        run: |
          echo "Attempting to create and push tag: $TAG_NAME to joicodev/orion_gem_dart_client"
          git config user.name "github-actions[bot]" # Ensure git user is set
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if tag already exists remotely before trying to create/push
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
            echo "Tag $TAG_NAME already exists in the remote repository."
          else
            git tag "$TAG_NAME"
            # The 'origin' here refers to joicodev/orion_gem_dart_client
            git push origin "$TAG_NAME"
            echo "Tag $TAG_NAME created and pushed to joicodev/orion_gem_dart_client."
          fi