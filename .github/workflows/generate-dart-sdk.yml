name: Generate Dart SDK

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  generate-sdk:
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout Dart SDK repo
        uses: actions/checkout@v4
        with:
          path: dart_sdk

      - name: ⬇️ Checkout NestJS API repo
        uses: actions/checkout@v4
        with:
          repository: joicodev/orion_gem_nest_api
          path: backend
          token: ${{ secrets.PAT_TOKEN }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: 🚀 Run NestJS API in background
        working-directory: backend
        run: |
          npm run start:dev &
          echo "⏳ Waiting for API to be ready..."
          for i in {1..30}; do
            if curl -s --fail http://localhost:3000/api-json > /dev/null; then
              echo "✅ API is up!"
              break
            elif [ $i -eq 30 ]; then
              echo "❌ API did not start in time."
              exit 1
            fi
            sleep 2
          done

      - name: 💾 Extract version from pubspec.yaml or default
        id: get_version
        working-directory: dart_sdk
        run: |
          if [ -f pubspec.yaml ]; then
            VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}' || echo "1.0.0")
          else
            VERSION="1.0.0"
          fi
          echo "Extracted/default version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: 🧹 Clean old SDK files
        working-directory: dart_sdk
        run: |
          rm -rf lib doc test pubspec.yaml .openapi-generator .openapi-generator-ignore openapi-docs

      - name: ⚙️ Generate Dart SDK
        working-directory: dart_sdk
        run: |
          npm install -g @openapitools/openapi-generator-cli
          openapi-generator-cli generate \
            -g dart-dio \
            -i http://localhost:3000/api-json \
            -o . \
            --additional-properties=pubName=orion_gem_dart_client,pubVersion=${{ steps.get_version.outputs.version }},serializationLibrary=built_value,buildRunner=true,useEnumExtension=true

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'

      - name: 📦 Generate .g.dart files
        working-directory: dart_sdk
        run: |
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs

      - name: 🆕 Create SDK branch and commit
        working-directory: dart_sdk
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          BRANCH_NAME="auto/sdk-update-v${{ steps.get_version.outputs.version }}"
          git checkout -B "$BRANCH_NAME"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "🔄 Auto SDK update (v${{ steps.get_version.outputs.version }})"
            git push origin "$BRANCH_NAME" --force
          fi

      - name: 🚀 Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(sdk): Auto-generated Dart client v${{ steps.get_version.outputs.version }}"
          committer: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          branch: auto/sdk-update-v${{ steps.get_version.outputs.version }}
          base: main
          delete-branch: true
          title: "🤖 SDK: Auto-generated update v${{ steps.get_version.outputs.version }}"
          body: |
            This PR contains the auto-generated Dart client for Orion GEM API.

            **Version:** `${{ steps.get_version.outputs.version }}`

            <sub>Generated by GitHub Actions 🤖</sub>
          labels: |
            sdk
            auto-generated
            version:${{ steps.get_version.outputs.version }}
          draft: false

      - name: 🏷️ Create and push tag
        if: github.ref == 'refs/heads/develop'
        working-directory: dart_sdk
        run: |
          TAG_NAME="v${{ steps.get_version.outputs.version }}"
          echo "Attempting to create and push tag: $TAG_NAME"
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists locally."
          else
            git tag "$TAG_NAME"
            git push origin "$TAG_NAME"
            echo "Tag $TAG_NAME created and pushed."
          fi
